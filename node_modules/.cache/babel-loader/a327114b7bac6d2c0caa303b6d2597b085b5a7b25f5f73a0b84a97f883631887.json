{"ast":null,"code":"// Data Service for SaaS Platform\n// This will handle saving/loading diagram data to/from the backend\n\nclass DataService {\n  constructor() {\n    this.baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n  }\n\n  // Save diagram data\n  async saveDiagram(diagramId, data, userId) {\n    try {\n      const response = await fetch(`${this.baseUrl}/diagrams/${diagramId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.getAuthToken()}`\n        },\n        body: JSON.stringify({\n          userId,\n          data,\n          updatedAt: new Date().toISOString()\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to save diagram: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error saving diagram:', error);\n      throw error;\n    }\n  }\n\n  // Load diagram data\n  async loadDiagram(diagramId, userId) {\n    try {\n      const response = await fetch(`${this.baseUrl}/diagrams/${diagramId}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.getAuthToken()}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to load diagram: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error loading diagram:', error);\n      throw error;\n    }\n  }\n\n  // Create new diagram\n  async createDiagram(name, data, userId) {\n    try {\n      const response = await fetch(`${this.baseUrl}/diagrams`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.getAuthToken()}`\n        },\n        body: JSON.stringify({\n          name,\n          userId,\n          data,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to create diagram: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error creating diagram:', error);\n      throw error;\n    }\n  }\n\n  // Get user's diagrams\n  async getUserDiagrams(userId) {\n    try {\n      const response = await fetch(`${this.baseUrl}/diagrams?userId=${userId}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.getAuthToken()}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to load user diagrams: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error loading user diagrams:', error);\n      throw error;\n    }\n  }\n\n  // Delete diagram\n  async deleteDiagram(diagramId, userId) {\n    try {\n      const response = await fetch(`${this.baseUrl}/diagrams/${diagramId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${this.getAuthToken()}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to delete diagram: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error deleting diagram:', error);\n      throw error;\n    }\n  }\n\n  // Export diagram as JSON\n  exportDiagram(data, filename = 'diagram.json') {\n    const dataStr = JSON.stringify(data, null, 2);\n    const dataBlob = new Blob([dataStr], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  }\n\n  // Import diagram from JSON file\n  importDiagram(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = e => {\n        try {\n          const data = JSON.parse(e.target.result);\n          resolve(data);\n        } catch (error) {\n          reject(new Error('Invalid JSON file'));\n        }\n      };\n      reader.onerror = () => reject(new Error('Failed to read file'));\n      reader.readAsText(file);\n    });\n  }\n\n  // Get authentication token (placeholder for now)\n  getAuthToken() {\n    // This would be implemented with your authentication system\n    return localStorage.getItem('authToken') || '';\n  }\n\n  // Save to localStorage as fallback\n  saveToLocalStorage(diagramId, data) {\n    try {\n      localStorage.setItem(`diagram_${diagramId}`, JSON.stringify(data));\n      return true;\n    } catch (error) {\n      console.error('Error saving to localStorage:', error);\n      return false;\n    }\n  }\n\n  // Load from localStorage as fallback\n  loadFromLocalStorage(diagramId) {\n    try {\n      const data = localStorage.getItem(`diagram_${diagramId}`);\n      return data ? JSON.parse(data) : null;\n    } catch (error) {\n      console.error('Error loading from localStorage:', error);\n      return null;\n    }\n  }\n}\nexport default new DataService();","map":{"version":3,"names":["DataService","constructor","baseUrl","process","env","REACT_APP_API_URL","saveDiagram","diagramId","data","userId","response","fetch","method","headers","getAuthToken","body","JSON","stringify","updatedAt","Date","toISOString","ok","Error","statusText","json","error","console","loadDiagram","createDiagram","name","createdAt","getUserDiagrams","deleteDiagram","exportDiagram","filename","dataStr","dataBlob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","revokeObjectURL","importDiagram","file","Promise","resolve","reject","reader","FileReader","onload","e","parse","target","result","onerror","readAsText","localStorage","getItem","saveToLocalStorage","setItem","loadFromLocalStorage"],"sources":["C:/Users/HP/Documents/Project/Don/flare-bible-study/src/services/dataService.js"],"sourcesContent":["// Data Service for SaaS Platform\r\n// This will handle saving/loading diagram data to/from the backend\r\n\r\nclass DataService {\r\n  constructor() {\r\n    this.baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\r\n  }\r\n\r\n  // Save diagram data\r\n  async saveDiagram(diagramId, data, userId) {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/diagrams/${diagramId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${this.getAuthToken()}`\r\n        },\r\n        body: JSON.stringify({\r\n          userId,\r\n          data,\r\n          updatedAt: new Date().toISOString()\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to save diagram: ${response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error saving diagram:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Load diagram data\r\n  async loadDiagram(diagramId, userId) {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/diagrams/${diagramId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.getAuthToken()}`\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to load diagram: ${response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error loading diagram:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Create new diagram\r\n  async createDiagram(name, data, userId) {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/diagrams`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${this.getAuthToken()}`\r\n        },\r\n        body: JSON.stringify({\r\n          name,\r\n          userId,\r\n          data,\r\n          createdAt: new Date().toISOString(),\r\n          updatedAt: new Date().toISOString()\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to create diagram: ${response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error creating diagram:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get user's diagrams\r\n  async getUserDiagrams(userId) {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/diagrams?userId=${userId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.getAuthToken()}`\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to load user diagrams: ${response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error loading user diagrams:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Delete diagram\r\n  async deleteDiagram(diagramId, userId) {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/diagrams/${diagramId}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.getAuthToken()}`\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to delete diagram: ${response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error deleting diagram:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Export diagram as JSON\r\n  exportDiagram(data, filename = 'diagram.json') {\r\n    const dataStr = JSON.stringify(data, null, 2);\r\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\r\n    const url = URL.createObjectURL(dataBlob);\r\n    \r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = filename;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    URL.revokeObjectURL(url);\r\n  }\r\n\r\n  // Import diagram from JSON file\r\n  importDiagram(file) {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        try {\r\n          const data = JSON.parse(e.target.result);\r\n          resolve(data);\r\n        } catch (error) {\r\n          reject(new Error('Invalid JSON file'));\r\n        }\r\n      };\r\n      reader.onerror = () => reject(new Error('Failed to read file'));\r\n      reader.readAsText(file);\r\n    });\r\n  }\r\n\r\n  // Get authentication token (placeholder for now)\r\n  getAuthToken() {\r\n    // This would be implemented with your authentication system\r\n    return localStorage.getItem('authToken') || '';\r\n  }\r\n\r\n  // Save to localStorage as fallback\r\n  saveToLocalStorage(diagramId, data) {\r\n    try {\r\n      localStorage.setItem(`diagram_${diagramId}`, JSON.stringify(data));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error saving to localStorage:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Load from localStorage as fallback\r\n  loadFromLocalStorage(diagramId) {\r\n    try {\r\n      const data = localStorage.getItem(`diagram_${diagramId}`);\r\n      return data ? JSON.parse(data) : null;\r\n    } catch (error) {\r\n      console.error('Error loading from localStorage:', error);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new DataService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}